{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\softlogic\\\\OneDrive\\\\Desktop\\\\online-mcq-system\\\\frontend\\\\src\\\\components\\\\Exam\\\\ExamInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport api from '../../api/apiService';\nimport ResultView from '../Exam/ResultView'; // import your ResultView component\nimport '../../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExamInterface = ({\n  exam,\n  user,\n  onBack\n}) => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [submitting, setSubmitting] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(exam.duration * 60);\n  const [showAllQuestions, setShowAllQuestions] = useState(false);\n  const [resultData, setResultData] = useState(null); // <-- store submitted result here\n  const [resultAnswers, setResultAnswers] = useState([]); // store answers for review\n\n  useEffect(() => {\n    // Fetch questions on mount\n    const loadQuestions = async () => {\n      try {\n        const data = await api.getQuestions(exam._id);\n        setQuestions(data);\n        setLoading(false);\n      } catch (error) {\n        alert('Failed to load exam questions.');\n      }\n    };\n    loadQuestions();\n  }, [exam._id]);\n\n  // Timer countdown\n  useEffect(() => {\n    if (timeLeft > 0 && !submitting) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    } else if (timeLeft <= 0 && !submitting) {\n      handleSubmit();\n    }\n  }, [timeLeft, submitting]);\n  const handleAnswerSelect = (questionId, optionKey) => {\n    setAnswers(prev => ({\n      ...prev,\n      [questionId]: optionKey\n    }));\n  };\n  const handleSubmit = async () => {\n    if (submitting) return;\n    setSubmitting(true);\n    try {\n      const formattedAnswers = Object.entries(answers).map(([questionId, selectedOption]) => ({\n        questionId,\n        selectedOption\n      }));\n      const response = await api.submitExam(user.id, exam._id, formattedAnswers);\n      if (response.result && response.result.id) {\n        // Fetch full result details after submission to get populated answers etc.\n        const details = await api.getResultDetails(response.result.id);\n        setResultData(details.result);\n        setResultAnswers(details.answers);\n      } else {\n        alert('Unexpected response from server.');\n      }\n    } catch (error) {\n      console.error('Error submitting exam:', error);\n      alert('Error submitting exam. Please try again.');\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  // If resultData exists, show the ResultView instead of exam questions\n  if (resultData) {\n    return /*#__PURE__*/_jsxDEV(ResultView, {\n      result: resultData,\n      answers: resultAnswers,\n      onBack: onBack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }, this);\n  }\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading exam questions...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 23\n  }, this);\n  const currentQuestion = questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exam-interface\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(ExamInterface, \"wpW7/VcxItGPrlri//Ushu4SVuk=\");\n_c = ExamInterface;\nexport default ExamInterface;\nvar _c;\n$RefreshReg$(_c, \"ExamInterface\");","map":{"version":3,"names":["React","useEffect","useState","api","ResultView","jsxDEV","_jsxDEV","ExamInterface","exam","user","onBack","_s","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","loading","setLoading","submitting","setSubmitting","timeLeft","setTimeLeft","duration","showAllQuestions","setShowAllQuestions","resultData","setResultData","resultAnswers","setResultAnswers","loadQuestions","data","getQuestions","_id","error","alert","timer","setTimeout","clearTimeout","handleSubmit","handleAnswerSelect","questionId","optionKey","prev","formattedAnswers","Object","entries","map","selectedOption","response","submitExam","id","result","details","getResultDetails","console","fileName","_jsxFileName","lineNumber","columnNumber","className","children","currentQuestion","_c","$RefreshReg$"],"sources":["C:/Users/softlogic/OneDrive/Desktop/online-mcq-system/frontend/src/components/Exam/ExamInterface.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport api from '../../api/apiService';\r\nimport ResultView from '../Exam/ResultView';  // import your ResultView component\r\nimport '../../App.css';\r\n\r\nconst ExamInterface = ({ exam, user, onBack }) => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [answers, setAnswers] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [timeLeft, setTimeLeft] = useState(exam.duration * 60);\r\n  const [showAllQuestions, setShowAllQuestions] = useState(false);\r\n  \r\n  const [resultData, setResultData] = useState(null);  // <-- store submitted result here\r\n  const [resultAnswers, setResultAnswers] = useState([]); // store answers for review\r\n\r\n  useEffect(() => {\r\n    // Fetch questions on mount\r\n    const loadQuestions = async () => {\r\n      try {\r\n        const data = await api.getQuestions(exam._id);\r\n        setQuestions(data);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        alert('Failed to load exam questions.');\r\n      }\r\n    };\r\n    loadQuestions();\r\n  }, [exam._id]);\r\n\r\n  // Timer countdown\r\n  useEffect(() => {\r\n    if (timeLeft > 0 && !submitting) {\r\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n      return () => clearTimeout(timer);\r\n    } else if (timeLeft <= 0 && !submitting) {\r\n      handleSubmit();\r\n    }\r\n  }, [timeLeft, submitting]);\r\n\r\n  const handleAnswerSelect = (questionId, optionKey) => {\r\n    setAnswers(prev => ({ ...prev, [questionId]: optionKey }));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (submitting) return;\r\n    setSubmitting(true);\r\n    try {\r\n      const formattedAnswers = Object.entries(answers).map(([questionId, selectedOption]) => ({\r\n        questionId,\r\n        selectedOption\r\n      }));\r\n\r\n      const response = await api.submitExam(user.id, exam._id, formattedAnswers);\r\n\r\n      if (response.result && response.result.id) {\r\n        // Fetch full result details after submission to get populated answers etc.\r\n        const details = await api.getResultDetails(response.result.id);\r\n\r\n        setResultData(details.result);\r\n        setResultAnswers(details.answers);\r\n      } else {\r\n        alert('Unexpected response from server.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error submitting exam:', error);\r\n      alert('Error submitting exam. Please try again.');\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // If resultData exists, show the ResultView instead of exam questions\r\n  if (resultData) {\r\n    return <ResultView result={resultData} answers={resultAnswers} onBack={onBack} />;\r\n  }\r\n\r\n  if (loading) return <div className=\"loading\">Loading exam questions...</div>;\r\n\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div className=\"exam-interface\">\r\n      {/* ... your existing exam UI here ... */}\r\n      {/* Use handleAnswerSelect on option change */}\r\n      {/* Submit button calls handleSubmit */}\r\n      {/* Your existing code remains unchanged */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExamInterface;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}