{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\softlogic\\\\OneDrive\\\\Desktop\\\\online-mcq-system\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, useNavigate } from 'react-router-dom'; // Import BrowserRouter, Routes, Route\nimport Auth from './components/Auth/Auth'; // Your Auth component\nimport Dashboard from './components/Dashboard/Dashboard'; // Your Dashboard component\nimport HomePage from './components/HomePage/HomePage'; // Your HomePage component\nimport ExamInterface from './components/Exam/ExamInterface'; // If used directly in routes\nimport ResultView from './components/Exam/ResultView'; // If used directly in routes\n\nimport './App.css'; // Your global CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [user, setUser] = useState(null); // State to hold user info after login\n  const [currentView, setCurrentView] = useState('home'); // State to manage current view within App\n  const [selectedExamForInterface, setSelectedExamForInterface] = useState(null);\n  const [examResultForView, setExamResultForView] = useState(null);\n  useEffect(() => {\n    // Check for logged-in user in localStorage on mount\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n      setCurrentView('dashboard'); // Go to dashboard if user is logged in\n    }\n  }, []);\n  const handleLogin = userData => {\n    setUser(userData);\n    localStorage.setItem('user', JSON.stringify(userData));\n    setCurrentView('dashboard');\n  };\n  const handleLogout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n    setCurrentView('home');\n    // If you're using useNavigate in App.js (e.g., to redirect after logout)\n    // You'd also need to wrap App in a Router if it directly uses useNavigate\n    // For this case, usually, the Auth component handles the redirect after login/logout,\n    // or you can pass navigate down as a prop if absolutely necessary, but usually avoid.\n  };\n\n  // Logic for ExamInterface and ResultView handled via state for simplicity\n  const handleStartExamFromDashboard = exam => {\n    setSelectedExamForInterface(exam);\n    setCurrentView('exam');\n  };\n  const handleExamCompleteFromInterface = result => {\n    setExamResultForView(result);\n    setCurrentView('result');\n  };\n  const handleBackFromExamOrResult = () => {\n    setSelectedExamForInterface(null);\n    setExamResultForView(null);\n    setCurrentView('dashboard');\n  };\n  return (\n    /*#__PURE__*/\n    // You MUST wrap your entire routing logic within <Router>\n    _jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 36\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/login\",\n            element: user ? /*#__PURE__*/_jsxDEV(Dashboard, {\n              user: user,\n              onLogout: handleLogout\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 48\n            }, this) : /*#__PURE__*/_jsxDEV(Auth, {\n              onLogin: handleLogin\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 100\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/register\",\n            element: user ? /*#__PURE__*/_jsxDEV(Dashboard, {\n              user: user,\n              onLogout: handleLogout\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 51\n            }, this) : /*#__PURE__*/_jsxDEV(Auth, {\n              onLogin: handleLogin,\n              isRegister: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 103\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/dashboard\",\n            element: user ? /*#__PURE__*/_jsxDEV(Dashboard, {\n              user: user,\n              onLogout: handleLogout,\n              onStartExam: handleStartExamFromDashboard // Pass prop\n              ,\n              onViewResultDetails: handleExamCompleteFromInterface // Pass prop\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(Auth, {\n              onLogin: handleLogin\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this) // Redirect to login if not authenticated\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"*\",\n            element: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"error-message\",\n              children: \"404 - Page Not Found\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 36\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(App, \"kzdiYlW5GHRLBdv/8RxU30O5tno=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","useNavigate","Auth","Dashboard","HomePage","ExamInterface","ResultView","jsxDEV","_jsxDEV","App","_s","user","setUser","currentView","setCurrentView","selectedExamForInterface","setSelectedExamForInterface","examResultForView","setExamResultForView","storedUser","localStorage","getItem","JSON","parse","handleLogin","userData","setItem","stringify","handleLogout","removeItem","handleStartExamFromDashboard","exam","handleExamCompleteFromInterface","result","handleBackFromExamOrResult","children","className","path","element","fileName","_jsxFileName","lineNumber","columnNumber","onLogout","onLogin","isRegister","onStartExam","onViewResultDetails","_c","$RefreshReg$"],"sources":["C:/Users/softlogic/OneDrive/Desktop/online-mcq-system/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, useNavigate } from 'react-router-dom'; // Import BrowserRouter, Routes, Route\nimport Auth from './components/Auth/Auth'; // Your Auth component\nimport Dashboard from './components/Dashboard/Dashboard'; // Your Dashboard component\nimport HomePage from './components/HomePage/HomePage'; // Your HomePage component\nimport ExamInterface from './components/Exam/ExamInterface'; // If used directly in routes\nimport ResultView from './components/Exam/ResultView'; // If used directly in routes\n\nimport './App.css'; // Your global CSS\n\nfunction App() {\n  const [user, setUser] = useState(null); // State to hold user info after login\n  const [currentView, setCurrentView] = useState('home'); // State to manage current view within App\n  const [selectedExamForInterface, setSelectedExamForInterface] = useState(null);\n  const [examResultForView, setExamResultForView] = useState(null);\n\n  useEffect(() => {\n    // Check for logged-in user in localStorage on mount\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n      setCurrentView('dashboard'); // Go to dashboard if user is logged in\n    }\n  }, []);\n\n  const handleLogin = (userData) => {\n    setUser(userData);\n    localStorage.setItem('user', JSON.stringify(userData));\n    setCurrentView('dashboard');\n  };\n\n  const handleLogout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n    setCurrentView('home');\n    // If you're using useNavigate in App.js (e.g., to redirect after logout)\n    // You'd also need to wrap App in a Router if it directly uses useNavigate\n    // For this case, usually, the Auth component handles the redirect after login/logout,\n    // or you can pass navigate down as a prop if absolutely necessary, but usually avoid.\n  };\n\n  // Logic for ExamInterface and ResultView handled via state for simplicity\n  const handleStartExamFromDashboard = (exam) => {\n    setSelectedExamForInterface(exam);\n    setCurrentView('exam');\n  };\n\n  const handleExamCompleteFromInterface = (result) => {\n    setExamResultForView(result);\n    setCurrentView('result');\n  };\n\n  const handleBackFromExamOrResult = () => {\n    setSelectedExamForInterface(null);\n    setExamResultForView(null);\n    setCurrentView('dashboard');\n  };\n\n\n  return (\n    // You MUST wrap your entire routing logic within <Router>\n    <Router>\n      <div className=\"App\">\n        {/*\n          This is the core of the fix.\n          Ensure that any component using React Router hooks (like Dashboard)\n          is rendered by a <Route> that is itself inside a <Routes>\n          which is inside a <Router>.\n        */}\n        <Routes>\n          {/* Public Home Page */}\n          <Route path=\"/\" element={<HomePage />} />\n\n          {/* Authentication Routes */}\n          <Route path=\"/login\" element={user ? <Dashboard user={user} onLogout={handleLogout} /> : <Auth onLogin={handleLogin} />} />\n          <Route path=\"/register\" element={user ? <Dashboard user={user} onLogout={handleLogout} /> : <Auth onLogin={handleLogin} isRegister={true} />} />\n\n          {/* Protected Dashboard Route */}\n          <Route\n            path=\"/dashboard\"\n            element={\n              user ? (\n                <Dashboard\n                  user={user}\n                  onLogout={handleLogout}\n                  onStartExam={handleStartExamFromDashboard} // Pass prop\n                  onViewResultDetails={handleExamCompleteFromInterface} // Pass prop\n                />\n              ) : (\n                <Auth onLogin={handleLogin} /> // Redirect to login if not authenticated\n              )\n            }\n          />\n\n          {/* Exam and Result views can be direct routes too, or managed by state as you currently do in Dashboard */}\n          {/* If you prefer to manage ExamInterface and ResultView directly within the Dashboard component's state,\n              then you don't need these specific routes here, but the Dashboard itself must be routed. */}\n          {/*\n          <Route path=\"/exam/:examId\" element={user ? <ExamInterface ... /> : <Auth />} />\n          <Route path=\"/result/:resultId\" element={user ? <ResultView ... /> : <Auth />} />\n          */}\n\n          {/* Fallback for unhandled paths */}\n          <Route path=\"*\" element={<p className=\"error-message\">404 - Page Not Found</p>} />\n        </Routes>\n\n        {/* Your current view logic might still be managing some components\n            outside of Routes, which is where the problem arises.\n            You should aim to replace this with proper React Router <Routes>.\n        */}\n        {/*\n        {currentView === 'home' && <HomePage />}\n        {currentView === 'auth' && <Auth onLogin={handleLogin} />}\n        {currentView === 'dashboard' && user && (\n          <Dashboard\n            user={user}\n            onLogout={handleLogout}\n            onStartExam={handleStartExamFromDashboard}\n            onViewResultDetails={handleExamCompleteFromInterface} // Pass this if you want to route to ResultView from Dashboard\n          />\n        )}\n        {currentView === 'exam' && selectedExamForInterface && (\n          <ExamInterface\n            exam={selectedExamForInterface}\n            user={user}\n            onComplete={handleExamCompleteFromInterface}\n            onBack={handleBackFromExamOrResult}\n          />\n        )}\n        {currentView === 'result' && examResultForView && (\n          <ResultView\n            result={examResultForView}\n            answers={examResultForView.answers}\n            onBack={handleBackFromExamOrResult}\n          />\n        )}\n        */}\n      </div>\n    </Router>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}