{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5000/api';\nasync function checkResponse(response) {\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`API error ${response.status}: ${errorText}`);\n  }\n  return response.json();\n}\nconst api = {\n  login: async (email, password) => {\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    return checkResponse(response);\n  },\n  register: async (name, email, password) => {\n    const response = await fetch(`${API_BASE_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        email,\n        password\n      })\n    });\n    return checkResponse(response);\n  },\n  getExams: async () => {\n    const response = await fetch(`${API_BASE_URL}/exams`);\n    return checkResponse(response);\n  },\n  getExamById: async id => {\n    const response = await fetch(`${API_BASE_URL}/exams/${id}`);\n    return checkResponse(response);\n  },\n  getQuestions: async examId => {\n    const response = await fetch(`${API_BASE_URL}/exams/${examId}/questions`);\n    return checkResponse(response);\n  },\n  submitExam: async (userId, examId, answers) => {\n    const response = await fetch(`${API_BASE_URL}/results/submit`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId,\n        examId,\n        answers\n      })\n    });\n    return checkResponse(response);\n  },\n  getUserResults: async userId => {\n    const response = await fetch(`${API_BASE_URL}/results/user/${userId}`);\n    return checkResponse(response);\n  },\n  getResultDetails: async resultId => {\n    const response = await fetch(`${API_BASE_URL}/results/${resultId}/details`);\n    return checkResponse(response);\n  }\n};\nexport default api;","map":{"version":3,"names":["API_BASE_URL","checkResponse","response","ok","errorText","text","Error","status","json","api","login","email","password","fetch","method","headers","body","JSON","stringify","register","name","getExams","getExamById","id","getQuestions","examId","submitExam","userId","answers","getUserResults","getResultDetails","resultId"],"sources":["C:/Users/softlogic/OneDrive/Desktop/online-mcq-system/frontend/src/api/apiService.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5000/api';\r\n\r\nasync function checkResponse(response) {\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    throw new Error(`API error ${response.status}: ${errorText}`);\r\n  }\r\n  return response.json();\r\n}\r\n\r\nconst api = {\r\n  login: async (email, password) => {\r\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n    return checkResponse(response);\r\n  },\r\n\r\n  register: async (name, email, password) => {\r\n    const response = await fetch(`${API_BASE_URL}/auth/register`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ name, email, password }),\r\n    });\r\n    return checkResponse(response);\r\n  },\r\n\r\n  getExams: async () => {\r\n    const response = await fetch(`${API_BASE_URL}/exams`);\r\n    return checkResponse(response);\r\n  },\r\n\r\n  getExamById: async (id) => {\r\n    const response = await fetch(`${API_BASE_URL}/exams/${id}`);\r\n    return checkResponse(response);\r\n  },\r\n\r\n  getQuestions: async (examId) => {\r\n    const response = await fetch(`${API_BASE_URL}/exams/${examId}/questions`);\r\n    return checkResponse(response);\r\n  },\r\n\r\n  submitExam: async (userId, examId, answers) => {\r\n    const response = await fetch(`${API_BASE_URL}/results/submit`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ userId, examId, answers }),\r\n    });\r\n    return checkResponse(response);\r\n  },\r\n\r\n  getUserResults: async (userId) => {\r\n    const response = await fetch(`${API_BASE_URL}/results/user/${userId}`);\r\n    return checkResponse(response);\r\n  },\r\n\r\n  getResultDetails: async (resultId) => {\r\n    const response = await fetch(`${API_BASE_URL}/results/${resultId}/details`);\r\n    return checkResponse(response);\r\n  },\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,2BAA2B;AAEhD,eAAeC,aAAaA,CAACC,QAAQ,EAAE;EACrC,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIC,KAAK,CAAC,aAAaJ,QAAQ,CAACK,MAAM,KAAKH,SAAS,EAAE,CAAC;EAC/D;EACA,OAAOF,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB;AAEA,MAAMC,GAAG,GAAG;EACVC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAChC,MAAMV,QAAQ,GAAG,MAAMW,KAAK,CAAC,GAAGb,YAAY,aAAa,EAAE;MACzDc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;IACF,OAAOX,aAAa,CAACC,QAAQ,CAAC;EAChC,CAAC;EAEDiB,QAAQ,EAAE,MAAAA,CAAOC,IAAI,EAAET,KAAK,EAAEC,QAAQ,KAAK;IACzC,MAAMV,QAAQ,GAAG,MAAMW,KAAK,CAAC,GAAGb,YAAY,gBAAgB,EAAE;MAC5Dc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEE,IAAI;QAAET,KAAK;QAAEC;MAAS,CAAC;IAChD,CAAC,CAAC;IACF,OAAOX,aAAa,CAACC,QAAQ,CAAC;EAChC,CAAC;EAEDmB,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,MAAMnB,QAAQ,GAAG,MAAMW,KAAK,CAAC,GAAGb,YAAY,QAAQ,CAAC;IACrD,OAAOC,aAAa,CAACC,QAAQ,CAAC;EAChC,CAAC;EAEDoB,WAAW,EAAE,MAAOC,EAAE,IAAK;IACzB,MAAMrB,QAAQ,GAAG,MAAMW,KAAK,CAAC,GAAGb,YAAY,UAAUuB,EAAE,EAAE,CAAC;IAC3D,OAAOtB,aAAa,CAACC,QAAQ,CAAC;EAChC,CAAC;EAEDsB,YAAY,EAAE,MAAOC,MAAM,IAAK;IAC9B,MAAMvB,QAAQ,GAAG,MAAMW,KAAK,CAAC,GAAGb,YAAY,UAAUyB,MAAM,YAAY,CAAC;IACzE,OAAOxB,aAAa,CAACC,QAAQ,CAAC;EAChC,CAAC;EAEDwB,UAAU,EAAE,MAAAA,CAAOC,MAAM,EAAEF,MAAM,EAAEG,OAAO,KAAK;IAC7C,MAAM1B,QAAQ,GAAG,MAAMW,KAAK,CAAC,GAAGb,YAAY,iBAAiB,EAAE;MAC7Dc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAES,MAAM;QAAEF,MAAM;QAAEG;MAAQ,CAAC;IAClD,CAAC,CAAC;IACF,OAAO3B,aAAa,CAACC,QAAQ,CAAC;EAChC,CAAC;EAED2B,cAAc,EAAE,MAAOF,MAAM,IAAK;IAChC,MAAMzB,QAAQ,GAAG,MAAMW,KAAK,CAAC,GAAGb,YAAY,iBAAiB2B,MAAM,EAAE,CAAC;IACtE,OAAO1B,aAAa,CAACC,QAAQ,CAAC;EAChC,CAAC;EAED4B,gBAAgB,EAAE,MAAOC,QAAQ,IAAK;IACpC,MAAM7B,QAAQ,GAAG,MAAMW,KAAK,CAAC,GAAGb,YAAY,YAAY+B,QAAQ,UAAU,CAAC;IAC3E,OAAO9B,aAAa,CAACC,QAAQ,CAAC;EAChC;AACF,CAAC;AAED,eAAeO,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}