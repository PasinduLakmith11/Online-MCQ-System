{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\softlogic\\\\OneDrive\\\\Desktop\\\\online-mcq-system\\\\frontend\\\\src\\\\pages\\\\Attempt.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { useUser } from \"../context/UserContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Attempt = () => {\n  _s();\n  const {\n    examId\n  } = useParams();\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState({}); // Store selected option index by question ID\n  const navigate = useNavigate();\n  const {\n    user,\n    setScore\n  } = useUser();\n  useEffect(() => {\n    axios.get(`http://localhost:5000/api/exams/${examId}/questions`).then(res => {\n      setQuestions(res.data);\n    });\n  }, [examId]);\n\n  // Store option index for each question\n  const handleChange = (questionId, optionIndex) => {\n    setAnswers(prev => ({\n      ...prev,\n      [questionId]: optionIndex\n    }));\n  };\n  const handleSubmit = async () => {\n    // Map answers as array of { questionId, selectedOption }\n    const answerArray = questions.map(q => ({\n      questionId: q._id,\n      selectedOption: answers[q._id] !== undefined ? answers[q._id] : null\n    }));\n    try {\n      const res = await axios.post(\"http://localhost:5000/api/results\", {\n        userId: user._id,\n        examId,\n        answers: answerArray\n      });\n      setScore(res.data.score);\n      navigate(\"/result\");\n    } catch (error) {\n      console.error(\"Error submitting exam:\", error);\n      alert(\"Failed to submit exam. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 max-w-3xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-4\",\n      children: \"Attempt Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), questions.map((q, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-semibold\",\n        children: [\"Q\", i + 1, \": \", q.question_text]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), q.options.map((opt, idx) => /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: q._id,\n          value: idx // option index\n          ,\n          checked: answers[q._id] === idx,\n          onChange: () => handleChange(q._id, idx) // send option index\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this), \" \", opt]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this))]\n    }, q._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      className: \"bg-green-600 text-white px-4 py-2 rounded\",\n      children: \"Submit Answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(Attempt, \"8jo7LT3bH5dj7384OAI4H+rGm3w=\", false, function () {\n  return [useParams, useNavigate, useUser];\n});\n_c = Attempt;\nexport default Attempt;\nvar _c;\n$RefreshReg$(_c, \"Attempt\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","axios","useUser","jsxDEV","_jsxDEV","Attempt","_s","examId","questions","setQuestions","answers","setAnswers","navigate","user","setScore","get","then","res","data","handleChange","questionId","optionIndex","prev","handleSubmit","answerArray","map","q","_id","selectedOption","undefined","post","userId","score","error","console","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","i","question_text","options","opt","idx","type","name","value","checked","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/softlogic/OneDrive/Desktop/online-mcq-system/frontend/src/pages/Attempt.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { useUser } from \"../context/UserContext\";\r\n\r\nconst Attempt = () => {\r\n  const { examId } = useParams();\r\n  const [questions, setQuestions] = useState([]);\r\n  const [answers, setAnswers] = useState({}); // Store selected option index by question ID\r\n  const navigate = useNavigate();\r\n  const { user, setScore } = useUser();\r\n\r\n  useEffect(() => {\r\n    axios.get(`http://localhost:5000/api/exams/${examId}/questions`).then((res) => {\r\n      setQuestions(res.data);\r\n    });\r\n  }, [examId]);\r\n\r\n  // Store option index for each question\r\n  const handleChange = (questionId, optionIndex) => {\r\n    setAnswers((prev) => ({ ...prev, [questionId]: optionIndex }));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    // Map answers as array of { questionId, selectedOption }\r\n    const answerArray = questions.map((q) => ({\r\n      questionId: q._id,\r\n      selectedOption: answers[q._id] !== undefined ? answers[q._id] : null,\r\n    }));\r\n\r\n    try {\r\n      const res = await axios.post(\"http://localhost:5000/api/results\", {\r\n        userId: user._id,\r\n        examId,\r\n        answers: answerArray,\r\n      });\r\n\r\n      setScore(res.data.score);\r\n      navigate(\"/result\");\r\n    } catch (error) {\r\n      console.error(\"Error submitting exam:\", error);\r\n      alert(\"Failed to submit exam. Please try again.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 max-w-3xl mx-auto\">\r\n      <h2 className=\"text-xl font-bold mb-4\">Attempt Questions</h2>\r\n      {questions.map((q, i) => (\r\n        <div key={q._id} className=\"mb-6\">\r\n          <p className=\"font-semibold\">\r\n            Q{i + 1}: {q.question_text}\r\n          </p>\r\n          {q.options.map((opt, idx) => (\r\n            <label key={idx} className=\"block\">\r\n              <input\r\n                type=\"radio\"\r\n                name={q._id}\r\n                value={idx} // option index\r\n                checked={answers[q._id] === idx}\r\n                onChange={() => handleChange(q._id, idx)} // send option index\r\n              />{\" \"}\r\n              {opt}\r\n            </label>\r\n          ))}\r\n        </div>\r\n      ))}\r\n      <button\r\n        onClick={handleSubmit}\r\n        className=\"bg-green-600 text-white px-4 py-2 rounded\"\r\n      >\r\n        Submit Answers\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Attempt;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}